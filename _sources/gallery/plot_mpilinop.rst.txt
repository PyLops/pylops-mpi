
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gallery/plot_mpilinop.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_gallery_plot_mpilinop.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gallery_plot_mpilinop.py:


MPILinearOperator
=================

This example demonstrates the use of the :py:class:`pylops_mpi.MPILinearOperator` to wrap
PyLops Operators. PyLops operators can be converted into :py:class:`pylops_mpi.MPILinearOperator`
using the :py:func:`pylops_mpi.asmpilinearoperator` method. Additionally, the example showcases
how to use these wrapped PyLops operators with other operators provided by PyLops-MPI.

.. GENERATED FROM PYTHON SOURCE LINES 11-25

.. code-block:: Python


    import numpy as np
    from mpi4py import MPI
    from matplotlib import pyplot as plt

    import pylops

    import pylops_mpi

    np.random.seed(42)
    plt.close("all")
    rank = MPI.COMM_WORLD.Get_rank()
    size = MPI.COMM_WORLD.Get_size()








.. GENERATED FROM PYTHON SOURCE LINES 26-29

Let's start by creating an instance of the :py:class:`pylops.FirstDerivative`,
which we will then convert into an MPILinearOperator using the :py:func:`pylops_mpi.asmpilinearoperator`
method.

.. GENERATED FROM PYTHON SOURCE LINES 29-34

.. code-block:: Python

    Ny, Nx = 11, 22
    Fop = pylops.FirstDerivative(dims=(Ny, Nx), axis=0, dtype=np.float64)
    Mop = pylops_mpi.asmpilinearoperator(Op=Fop)
    print(Mop)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    <242x242 MPILinearOperator with dtype=float64>




.. GENERATED FROM PYTHON SOURCE LINES 35-40

Now, to carry out the matrix-vector product using the MPILinearOperator, we first
create a :py:class:`pylops_mpi.DistributedArray` with the partition set to
``pylops_mpi.Partition.BROADCAST``, denoted by :math:`x`. The matrix-vector product
is then computed at each rank, and the result returned is a :py:class:`pylops_mpi.DistributedArray`
with the same partitioning.

.. GENERATED FROM PYTHON SOURCE LINES 40-45

.. code-block:: Python

    x = pylops_mpi.DistributedArray(global_shape=Ny * Nx, partition=pylops_mpi.Partition.BROADCAST)
    x[:] = 1
    y = Mop @ x
    print(f'y: {y}')





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    y: <DistributedArray with global shape=(np.int64(242),), local shape=(242,), dtype=float64, processes=[0])> 




.. GENERATED FROM PYTHON SOURCE LINES 46-51

Next, we can take the MPILinearOperator and combine it with other
operators provided by pylops_mpi to create more advanced MPI operators.
In this example, we'll combine the :py:class:`pylops_mpi.MPILinearOperator` with
the :py:class:`pylops_mpi.basicoperators.MPIVStack` and perform matrix-vector
multiplication and adjoint matrix-vector multiplication.

.. GENERATED FROM PYTHON SOURCE LINES 51-55

.. code-block:: Python

    Sop = pylops.SecondDerivative(dims=(Ny, Nx), axis=0, dtype=np.float64)
    VStack = pylops_mpi.MPIVStack(ops=[(rank + 1) * Sop, ])
    FullOp = VStack @ Mop








.. GENERATED FROM PYTHON SOURCE LINES 56-59

To perform the matrix vector multiplication on the full operator, we will use
a :py:class:`pylops_mpi.DistributedArray` with partition set to
``pylops_mpi.Partition.BROADCAST``.

.. GENERATED FROM PYTHON SOURCE LINES 59-78

.. code-block:: Python

    X = np.zeros(shape=(Ny, Nx))
    X[Ny // 2, Nx // 2] = 1
    X1 = X.ravel()
    x = pylops_mpi.DistributedArray(global_shape=Ny * Nx, partition=pylops_mpi.Partition.BROADCAST)
    x[:] = X1
    y_dist = FullOp @ x
    y = y_dist.asarray().reshape((size * Ny, Nx))
    if rank == 0:
        fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(10, 3))
        im1 = ax[0].imshow(X, interpolation="nearest")
        ax[0].set_title("$x$")
        ax[0].axis("tight")
        fig.colorbar(im1, ax=ax[0])
        im2 = ax[1].imshow(y, interpolation="nearest")
        ax[1].set_title("$y$")
        ax[1].axis("tight")
        fig.colorbar(im2, ax=ax[1])
        fig.suptitle("Forward", fontsize=14, fontweight="bold")




.. image-sg:: /gallery/images/sphx_glr_plot_mpilinop_001.png
   :alt: Forward, $x$, $y$
   :srcset: /gallery/images/sphx_glr_plot_mpilinop_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 79-83

For adjoint matrix-vector multiplication, we will use a :py:class:`pylops_mpi.DistributedArray`
with the partition set to ``pylops_mpi.Partition.SCATTER``. It is essential
to ensure that the operators align appropriately with their corresponding
:math:`x` during this process.

.. GENERATED FROM PYTHON SOURCE LINES 83-98

.. code-block:: Python

    x = pylops_mpi.DistributedArray(global_shape=size * Ny * Nx, partition=pylops_mpi.Partition.SCATTER)
    x[:] = X1
    y_dist = FullOp.H @ x
    y = y_dist.asarray().reshape((Ny, Nx))
    if rank == 0:
        fig, ax = plt.subplots(nrows=1, ncols=2, figsize=(10, 3))
        im1 = ax[0].imshow(X, interpolation="nearest")
        ax[0].set_title("$x$")
        ax[0].axis("tight")
        fig.colorbar(im1, ax=ax[0])
        im2 = ax[1].imshow(y, interpolation="nearest")
        ax[1].set_title("$y$")
        ax[1].axis("tight")
        fig.colorbar(im2, ax=ax[1])
        fig.suptitle("Adjoint", fontsize=14, fontweight="bold")



.. image-sg:: /gallery/images/sphx_glr_plot_mpilinop_002.png
   :alt: Adjoint, $x$, $y$
   :srcset: /gallery/images/sphx_glr_plot_mpilinop_002.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 0.337 seconds)


.. _sphx_glr_download_gallery_plot_mpilinop.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_mpilinop.ipynb <plot_mpilinop.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_mpilinop.py <plot_mpilinop.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_mpilinop.zip <plot_mpilinop.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
